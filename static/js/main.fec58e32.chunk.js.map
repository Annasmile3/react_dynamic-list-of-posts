{"version":3,"sources":["components/User.tsx","components/Comment.tsx","components/CommentList.tsx","components/Post.tsx","components/PostList.tsx","api.ts","App.tsx","index.tsx"],"names":["User","user","name","email","city","address","className","Comment","comment","body","CommentList","comments","map","key","id","Post","post","title","PostList","postList","API_URL","App","useState","posts","setPosts","searchValue","setSearchValue","isLoading","setLoading","isLoaded","setLoaded","handleLoad","a","Promise","all","fetch","then","response","json","postsResponse","usersResponse","commentsResponse","preparedPosts","find","userId","filter","postId","filteredPosts","toLowerCase","includes","type","placeholder","value","onChange","event","target","onClick","ReactDOM","render","document","getElementById"],"mappings":"sPAMaA,G,MAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxBC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,MACNC,EADyBH,EAAZI,QACbD,KAER,OACE,yBAAKE,UAAU,QACb,6CAAeJ,IACf,6CAAeC,IACf,8CAAgBC,OCRTG,EAAqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAChC,oCACE,wBAAIF,UAAU,WAAWE,EAAQN,MACjC,2BAAIM,EAAQC,MACZ,uBAAGH,UAAU,SAAb,gBAEGE,EAAQL,SCLFO,EAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvC,OACE,wBAAIL,UAAU,YACXK,EAASC,KAAI,SAAAJ,GAAO,OACnB,wBAAIF,UAAU,UAAUO,IAAKL,EAAQM,IACnC,kBAAC,EAAD,CAASN,QAASA,UCJfO,EAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE9BC,EAIED,EAJFC,MACAR,EAGEO,EAHFP,KACAR,EAEEe,EAFFf,KACAU,EACEK,EADFL,SAGF,OACE,yBAAKL,UAAU,QACb,wBAAIA,UAAU,SAASW,GACvB,2BAAIR,GACJ,kBAAC,EAAD,CAAMR,KAAMA,IACZ,kBAAC,EAAD,CAAaU,SAAUA,MCdhBO,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjC,6BACIA,EAASP,KAAI,SAAAI,GAAI,OACjB,kBAAC,EAAD,CAAMH,IAAKG,EAAKF,GAAIE,KAAMA,SCV1BI,EAAU,uCC6DDC,EAxDC,WAAO,IAAD,EACMC,mBAA6B,IADnC,mBACbC,EADa,KACNC,EADM,OAEkBF,mBAAiB,IAFnC,mBAEbG,EAFa,KAEAC,EAFA,OAGYJ,oBAAS,GAHrB,mBAGbK,EAHa,KAGFC,EAHE,OAIUN,oBAAS,GAJnB,mBAIbO,EAJa,KAIHC,EAJG,KAMdC,EAAU,uCAAG,sCAAAC,EAAA,6DACjBJ,GAAW,GADM,SAE8CK,QAC5DC,IAAI,CDXFC,MAAM,GAAD,OAAIf,EAAJ,WACTgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAItBH,MAAM,GAAD,OAAIf,EAAJ,WACTgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAItBH,MAAM,GAAD,OAAIf,EAAJ,cACTgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCHV,mCAEVC,EAFU,KAEKC,EAFL,KAEoBC,EAFpB,KAKXC,EAAgBH,EAAc3B,KAAI,SAAAI,GAAI,sBACvCA,EADuC,CAE1Cf,KAAOuC,EAAcG,MAAK,SAAA1C,GAAI,OAAIA,EAAKa,KAAOE,EAAK4B,UACnDjC,SAAU8B,EAAiBI,QAAO,SAAArC,GAAO,OAAIA,EAAQsC,SAAW9B,EAAKF,WAGvEU,EAASkB,GACTZ,GAAU,GAZO,4CAAH,qDAqBViB,EAAiC,KAAhBtB,EACnBF,EACAA,EAAMsB,QAAO,SAAA7B,GAAI,OAAIA,EAAKC,MACzB+B,cAAcC,SAASxB,EAAYuB,gBACjChC,EAAKP,KAAKuC,cAAcC,SAASxB,EAAYuB,kBAEpD,OACE,oCACInB,EAMA,yBAAKvB,UAAU,OACb,2BACE4C,KAAK,OACL5C,UAAU,SACV6C,YAAY,kBACZC,MAAO3B,EACP4B,SA1BW,SAACC,GAA0C,IACtDC,EAAWD,EAAXC,OAER7B,EAAe6B,EAAOH,UAyBhB,kBAAC,EAAD,CAAUjC,SAAU4B,KAbtB,yBAAKzC,UAAU,QACb,4BAAQ4C,KAAK,SAASM,QAASzB,GAA/B,QACCJ,GAAa,uBAAGrB,UAAU,QAAb,iBCtCxBmD,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.fec58e32.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n  const { city } = address;\n\n  return (\n    <div className=\"user\">\n      <p>{`author: ${name}`}</p>\n      <p>{`e-mail: ${email}`}</p>\n      <p>{`address: ${city}`}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => (\n  <>\n    <h4 className=\"caption\">{comment.name}</h4>\n    <p>{comment.body}</p>\n    <p className=\"email\">\n      commented by:\n      {comment.email}\n    </p>\n  </>\n);\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n  return (\n    <ul className=\"comments\">\n      {comments.map(comment => (\n        <li className=\"comment\" key={comment.id}>\n          <Comment comment={comment} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\n\ninterface Props {\n  post: PostWithComments;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <div className=\"post\">\n      <h2 className=\"title\">{title}</h2>\n      <p>{body}</p>\n      <User user={user} />\n      <CommentList comments={comments} />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Post } from './Post';\n\ninterface Props {\n  postList: PostWithComments[];\n}\n\nexport const PostList: FC<Props> = ({ postList }) => (\n  <div>\n    { postList.map(post => (\n      <Post key={post.id} post={post} />\n    ))}\n  </div>\n);\n","const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = (): Promise<Post[]> => {\n  return fetch(`${API_URL}/posts`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json());\n};\n\nexport const getComments = (): Promise<Comment[]> => {\n  return fetch(`${API_URL}/comments`)\n    .then(response => response.json());\n};\n","import React, { FC, useState, ChangeEvent } from 'react';\nimport './App.css';\nimport { PostList } from './components/PostList';\nimport { getPosts, getUsers, getComments } from './api';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PostWithComments[]>([]);\n  const [searchValue, setSearchValue] = useState<string>('');\n  const [isLoading, setLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n\n  const handleLoad = async () => {\n    setLoading(true);\n    const [postsResponse, usersResponse, commentsResponse] = await Promise\n      .all([getPosts(), getUsers(), getComments()]);\n\n    const preparedPosts = postsResponse.map(post => ({\n      ...post,\n      user: (usersResponse.find(user => user.id === post.userId)) as User,\n      comments: commentsResponse.filter(comment => comment.postId === post.id) as Comment[],\n    }));\n\n    setPosts(preparedPosts);\n    setLoaded(true);\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setSearchValue(target.value);\n  };\n\n  const filteredPosts = (searchValue === '')\n    ? posts\n    : posts.filter(post => post.title\n      .toLowerCase().includes(searchValue.toLowerCase())\n      || post.body.toLowerCase().includes(searchValue.toLowerCase()));\n\n  return (\n    <>\n      {!isLoaded ? (\n        <div className=\"load\">\n          <button type=\"button\" onClick={handleLoad}>Load</button>\n          {isLoading && <p className=\"text\">Loading...</p>}\n        </div>\n      ) : (\n        <div className=\"app\">\n          <input\n            type=\"text\"\n            className=\"search\"\n            placeholder=\"Search the post\"\n            value={searchValue}\n            onChange={handleChange}\n          />\n          <PostList postList={filteredPosts} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}